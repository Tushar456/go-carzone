basePath: /
definitions:
  models.Car:
    properties:
      brand:
        type: string
      created_at:
        type: string
      engine:
        $ref: '#/definitions/models.Engine'
      engine_id:
        type: string
      fuel_type:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
      year:
        type: string
    type: object
  models.CarRequest:
    properties:
      brand:
        type: string
      engine_id:
        type: string
      fuel_type:
        type: string
      name:
        type: string
      price:
        type: number
      year:
        type: string
    type: object
  models.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Engine:
    properties:
      car_range:
        type: integer
      displacement:
        type: integer
      engine_id:
        type: string
      no_of_cylinders:
        type: integer
    type: object
  models.EngineRequest:
    properties:
      car_range:
        type: integer
      displacement:
        type: integer
      no_of_cylinders:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing cars and engines.
  title: Carzone API
  version: "1.0"
paths:
  /cars:
    post:
      consumes:
      - application/json
      description: create car
      parameters:
      - description: Car Request
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/models.CarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create car
      tags:
      - cars
  /cars/{id}:
    delete:
      description: delete car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete car
      tags:
      - cars
    get:
      description: get car by ID
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get car by ID
      tags:
      - cars
    put:
      consumes:
      - application/json
      description: update car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Car Request
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/models.CarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Car'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update car
      tags:
      - cars
  /cars/brand/{brand}:
    get:
      description: get cars by brand
      parameters:
      - description: Brand
        in: path
        name: brand
        required: true
        type: string
      - description: Include engine
        in: query
        name: isEngine
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Car'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get cars by brand
      tags:
      - cars
  /engines:
    post:
      consumes:
      - application/json
      description: create engine
      parameters:
      - description: Engine Request
        in: body
        name: engine
        required: true
        schema:
          $ref: '#/definitions/models.EngineRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Engine'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create engine
      tags:
      - engines
  /engines/{id}:
    delete:
      description: delete engine
      parameters:
      - description: Engine ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Engine'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete engine
      tags:
      - engines
    get:
      description: get engine by ID
      parameters:
      - description: Engine ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Engine'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get engine by ID
      tags:
      - engines
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
